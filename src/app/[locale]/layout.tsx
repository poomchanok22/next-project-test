import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "@/app/globals.css";
import { setRequestLocale } from "next-intl/server";
import { hasLocale } from "next-intl";
import { notFound } from "next/navigation";
import { routing } from "@/i18n/routing";

import { ClientApolloProvider } from "@/lib/ClientApolloProvider";
import { NextIntlClientProvider } from "next-intl";
import NavBar from "@/components/NavBar";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

type Props = {
  children: React.ReactNode;
  params: Promise<{ locale: string }>;
};

export function generateStaticParams() {
  return routing.locales.map((locale) => ({ locale }));
}

export default async function LocaleLayout({ children, params }: Props) {
  const { locale } = await params;

  // ตรวจสอบว่า locale ถูกต้อง
  if (!hasLocale(routing.locales, locale)) notFound();

  // ตั้งค่า request locale สำหรับ Server Components
  setRequestLocale(locale);

  // โหลดไฟล์ข้อความแปลของ locale ปัจจุบัน
  const messages = (await import(`@/i18n/messages/${locale}.json`)).default;

  return (
    <html lang={locale}>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <NextIntlClientProvider locale={locale} messages={messages}>
          <ClientApolloProvider>
            <NavBar />
            {children}
          </ClientApolloProvider>
        </NextIntlClientProvider>
      </body>
    </html>
  );
}
